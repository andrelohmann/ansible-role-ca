---

- name: CA | Create /opt/ca/intermediate
  ansible.builtin.file:
    path: "/opt/ca/intermediate"
    state: directory
    owner: root
    group: root
    mode: '0600'

- name: CA | Create the intermediate_ca private key
  # Single OpenSSL command to create the key
  # openssl ecparam -name secp384r1 -genkey -noout -out intermediate_ca.key <- generate a ECDSA-384 Key
  community.crypto.openssl_privatekey:
    path: "/opt/ca/intermediate/intermediate_ca.key"
    # ECDSA-384
    type: ECC
    curve: secp384r1
    mode: '0600'
    owner: root
    group: root

- name: CA | Check whether intermediate csr exists
  ansible.builtin.stat:
    path: "/opt/ca/intermediate/intermediate_ca.csr"
  register: intermediate_csr_exists

- name: CA | Create the intermediate_ca certificate signing request (CSR) for CA certificate
  # Single OpenSSL commands to create the CSR
  # openssl req -new -key intermediate_ca.key -out intermediate_ca.csr -subj "/C=DE/ST=__STATE__/L=__LOCALITY__/O=__ORGANISATION__/OU=__ORGANISATIONA_UNIT__/CN=__CA_NAME__/emailAddress=__EMAIL__" -passin pass:{{ ca_root_key_pass }} <- generate the csr
  # openssl req -in intermediate_ca.csr -noout -text <- watch the csr in clear text
  community.crypto.openssl_csr_pipe:
    privatekey_path: "/opt/ca/intermediate/intermediate_ca.key"
    common_name: "{{ ca_intermediate_cert_cn }}"
    country_name: "{{ ca_cert_country }}"
    email_address: "{{ ca_cert_email }}"
    organization_name: "{{ ca_cert_org }}"
    organizational_unit_name: "{{ ca_cert_ou }}"
    state_or_province_name: "{{ ca_cert_state }}"
    locality_name: "{{ ca_cert_locality }}"
    use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
    basic_constraints:  # Our certificate is a CA
    - 'CA:TRUE'
    - 'pathlen:0'  # don't allow further sub-sub CAs
    basic_constraints_critical: true
    key_usage:
    - digitalSignature
    - keyCertSign
    - cRLSign
    key_usage_critical: true
    create_subject_key_identifier: true
    authority_key_identifier: "{{ root_ca_crt.diff.after.subject_key_identifier }}"
  register: intermediate_ca_csr
  when: not intermediate_csr_exists.stat.exists

- name: CA | Store CSR
  ansible.builtin.copy:
    dest: "/opt/ca/intermediate/intermediate_ca.csr"
    content: "{{ intermediate_ca_csr.csr }}"
    mode: '0600'
    owner: root
    group: root
  when: not intermediate_csr_exists.stat.exists and intermediate_ca_csr is changed

- name: CA | Create root-ca-signed CA certificate from CSR
  # OpenSSL command to create the CA crt
  # openssl x509 -req -in intermediate_ca.csr -CA root_ca.crt -CAkey root_ca.key -CAcreateserial -out intermediate_ca.crt -days 1825 -sha256 -extensions v3_ca -extfile <(cat <<EOF
  # [ v3_ca ]
  # basicConstraints = CA:true, pathlen:0 <- don't allow further sub-sub CAs
  # keyUsage = critical, digitalSignature, keyCertSign, cRLSign
  # subjectKeyIdentifier = hash
  # authorityKeyIdentifier = keyid:always,issuer
  # EOF
  # ) <- create the crt
  # openssl x509 -in intermediate_ca.crt -noout -text <- watch the crt in clear text
  community.crypto.x509_certificate:
    path: "/opt/ca/intermediate/intermediate_ca.crt"
    csr_path: "/opt/ca/intermediate/intermediate_ca.csr"
    # csr_content: "{{ intermediate_ca_csr.csr }}"
    # privatekey_path: /opt/ca/root/root_ca.key
    # privatekey_passphrase: "{{ ca_root_key_pass }}"
    provider: ownca
    ownca_path: "/opt/ca/root/root_ca.crt"
    ownca_privatekey_path: "/opt/ca/root/root_ca.key"
    ownca_privatekey_passphrase: "{{ ca_root_key_pass }}"
    ownca_not_after: "+{{ ca_intermediate_validity }}d"  # valid for ca_intermediate_validity days
    ownca_not_before: "-1d"  # valid since yesterday

- name: CA | Convert PEM to DER using OpenSSL
  ansible.builtin.command: >
    openssl x509 -in /opt/ca/intermediate/intermediate_ca.crt -out /opt/ca/intermediate/intermediate_ca.der -outform DER
  args:
    creates: /opt/ca/intermediate/intermediate_ca.der

...
